###Ядро Linux

это сложная модульная система, состоящая из множества компонентов, взаимодействующих друг с другом. Ниже приведены **основные архитектурные компоненты ядра Linux** с более подробным описанием.  

## **1. Подсистема управления процессами (Process Scheduler)**
Отвечает за распределение времени CPU между процессами.  
- **Компоненты:**  
  - **CFS (Completely Fair Scheduler)** – основной планировщик, обеспечивающий "честное" распределение CPU.  
  - **Реальные планировщики (Real-Time Schedulers):**  
    - `SCHED_FIFO` (строгий FIFO)  
    - `SCHED_RR` (Round Robin)  
    - `SCHED_DEADLINE` (на основе дедлайнов)  
  - **Механизмы переключения контекста** – быстрая смена процессов.  
  - **Очереди выполнения (Runqueues)** – списки готовых к выполнению процессов.  

---

## **2. Подсистема управления памятью (Memory Management, MM)**
Управляет оперативной памятью, виртуальной памятью, подкачкой (swap) и выделением памяти процессам.  
- **Компоненты:**  
  - **Менеджер физической памяти (Page Allocator, Buddy Allocator)** – выделяет страницы памяти.  
  - **SLAB/SLUB/SLOB аллокаторы** – для мелких объектов (кэши ядра).  
  - **Управление виртуальной памятью (Virtual Memory, VM)** – страничная адресация, MMU.  
  - **Механизм подкачки (Swap)** – перемещение неактивных страниц на диск.  
  - **OOM Killer (Out-of-Memory Killer)** – завершает процессы при нехватке памяти.  
  - **HugeTLB** – поддержка огромных страниц (для снижения нагрузки на TLB).  

---

## **3. Подсистема ввода-вывода (I/O Subsystem)**
Обеспечивает работу с устройствами и файловыми системами.  
- **Компоненты:**  
  - **Блочный ввод-вывод (Block I/O)** – работа с дисками (через `bio`-структуры).  
  - **Кэширование (Page Cache, Buffer Cache)** – ускорение доступа к данным.  
  - **Асинхронный I/O (AIO, io_uring)** – для высокопроизводительных операций.  
  - **Управление DMA** – прямой доступ к памяти без участия CPU.  

---

## **4. Виртуальная файловая система (VFS, Virtual File System)**
Абстрагирует доступ к разным файловым системам.  
- **Компоненты:**  
  - **Объекты VFS:** `super_block`, `inode`, `dentry`, `file`.  
  - **Поддержка файловых систем:**  
    - **Дисковые (ext4, XFS, Btrfs, NTFS)**  
    - **Сетевые (NFS, CIFS)**  
    - **Специальные (procfs, sysfs, tmpfs, devtmpfs)**  
  - **Механизмы кэширования (dcache, icache)** – ускорение доступа к файлам.  

---

## **5. Сетевой стек (Networking Stack)**
Обеспечивает работу сетевых протоколов и драйверов.  
- **Компоненты:**  
  - **Уровни стека:**  
    - **Socket Layer** (интерфейс для пользовательских программ).  
    - **TCP/IP (IPv4/IPv6), UDP, ICMP, ARP**.  
    - **Драйверы сетевых устройств (NIC, virtio_net)**.  
  - **Netfilter / iptables / nftables** – фильтрация и NAT.  
  - **Traffic Control (QoS, tc)** – управление очередями пакетов.  
  - **Поддержка VPN (WireGuard, OpenVPN в ядре)**.  

---

## **6. Подсистема устройств и драйверов (Device Drivers)**
Обеспечивает взаимодействие с аппаратурой.  
- **Компоненты:**  
  - **Модель устройств (Device Tree, ACPI)** – описание железа.  
  - **Подсистемы драйверов:**  
    - **Char Devices (tty, /dev/random)** – посимвольный доступ.  
    - **Block Devices (HDD, SSD, NVMe)** – блочный доступ.  
    - **Network Devices (Ethernet, Wi-Fi)** – сетевая подсистема.  
  - **Шина устройств (PCI, USB, I2C, SPI, GPIO)**.  
  - **Платформо-зависимые драйверы (ARM, x86, RISC-V)**.  

---

## **7. Механизмы межпроцессного взаимодействия (IPC)**
Позволяет процессам обмениваться данными.  
- **Компоненты:**  
  - **Системные вызовы (System Calls)** – `fork()`, `exec()`, `wait()`.  
  - **Очереди сообщений (Message Queues, SysV, POSIX)**.  
  - **Семафоры (Semaphores)** – синхронизация.  
  - **Разделяемая память (Shared Memory)** – `shmget()`, `mmap()`.  
  - **Сигналы (Signals)** – асинхронные уведомления.  
  - **Сокеты (Unix Domain Sockets)** – локальное взаимодействие.  

---

## **8. Безопасность и контроль доступа (Security)**
Обеспечивает защиту системы.  
- **Компоненты:**  
  - **Модули безопасности (LSM, Linux Security Modules):**  
    - **SELinux** – мандатное управление доступом.  
    - **AppArmor** – профильная защита.  
    - **Smack, TOMOYO** – альтернативные системы.  
  - **Capabilities** – разграничение привилегий.  
  - **Seccomp** – фильтрация системных вызовов.  
  - **Integrity Measurement (IMA, EVM)** – контроль целостности.  

---

## **9. Поддержка многопроцессорности (SMP, NUMA)**
Обеспечивает работу на многоядерных и NUMA-системах.  
- **Компоненты:**  
  - **Спинлоки (spinlocks), мьютексы (mutex), RCU** – синхронизация.  
  - **Per-CPU переменные** – оптимизация доступа.  
  - **NUMA-балансировка** – распределение памяти между узлами.  

---

## **10. Отладка и мониторинг (Debugging & Tracing)**
Позволяет анализировать работу ядра.  
- **Компоненты:**  
  - **ftrace** – трассировка функций.  
  - **perf** – профилирование.  
  - **kprobes / uprobes** – динамические точки отладки.  
  - **KASAN, UBSAN** – детектирование ошибок памяти.  
  - **printk / dmesg** – логи ядра.  

---

### **Вывод**  
Ядро Linux — это **модульная, гибкая и расширяемая** система, где каждая подсистема отвечает за свою область. Современные версии ядра (6.x) продолжают развиваться, добавляя поддержку новых технологий (например, **eBPF, Rust в ядре, улучшенная безопасность**).  
